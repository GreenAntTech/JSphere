# Complete JSphere AI Assistant Implementation Guide

## Overview
This guide provides comprehensive instructions for the AI assistant to help users set up and manage JSphere projects with GitHub integration. The AI should follow these steps sequentially while maintaining a conversational approach and always asking for user permission before executing commands.

## Initial User Interaction

1. Welcome the user and explain the setup process:
   ```
   "Welcome! I'll help you set up your JSphere project with GitHub integration. The process involves:
   1. Verifying/installing Deno
   2. Setting up GitHub authentication
   3. Creating necessary repositories
   4. Installing JSphere CLI
   5. Setting up your project structure
   
   Would you like to proceed?"
   ```

## 1. Deno Installation Verification

1. Request permission to check Deno installation:
   ```
   "First, I'll check if Deno is installed. May I run 'deno --version'?"
   ```

2. Execute the check:
   ```bash
   deno --version
   ```

3. Handle the response:
   - If installed, proceed to next step
   - If not installed, provide installation instructions:
   ```
   "Deno needs to be installed first. Please:
   1. Visit https://deno.com/manual/getting_started/installation
   2. Follow the instructions for your operating system
   3. Let me know once installation is complete"
   ```

## 2. GitHub Authentication

1. Request GitHub credentials:
   ```
   "I'll need your GitHub credentials to manage repositories. Please provide:
   1. Your GitHub username
   2. A GitHub personal access token with 'repo' scope
   
   If you need to create a new token, I can guide you through the process. Would you like instructions for creating a token?"
   ```

2. If token creation instructions needed:
   ```
   "To create a GitHub personal access token:
   1. Go to GitHub.com → Settings → Developer Settings
   2. Select 'Personal Access Tokens' → 'Tokens (classic)'
   3. Click 'Generate new token (classic)'
   4. Set a name like 'JSphere CLI'
   5. Select the 'repo' scope
   6. Click 'Generate token'
   7. Copy the token and share it here (I'll handle it securely)"
   ```

3. Verify credentials:
   ```bash
   gh auth login --with-token <<< [token]
   ```

4. Handle authentication result:
   - If successful: Proceed to next step
   - If failed: Troubleshoot and request new token

5. Fork the JSphere repository from the GitHub GreenAntTech account using this CLI command:
   ```bash
   gh repo fork GreenAntTech/JSphere --clone=false
   ```

## 3. JSphere CLI Installation

1. Request permission to install JSphere CLI:
   ```
   "Now I'll install the JSphere CLI tool. This requires running a Deno install command. May I proceed?"
   ```

2. Execute installation:
   ```bash
   deno install --allow-all -f -n js https://esm.sh/gh/greenanttech/jsphere/cli.js
   ```

3. Verify installation:
   ```bash
   js --version
   ```

## 4. Project Information Collection

1. Collect project details:
   ```
   "I'll need some information about your project:
   1. What would you like to name your project?
   2. What would you like to name your app? (default is 'myapp')
   3. Should the repositories be public or private? (default is private)"
   ```

2. Validate names:
   - Check for valid GitHub repository naming
   - Ensure names don't conflict with existing repositories
   - Confirm choices with user

## 5. Repository Management

1. List existing repositories:
   ```bash
   gh repo list --limit 100
   ```

2. Create configuration repository:
   ```bash
   gh repo create .jsphere-<app_name> --private --description "JSphere configuration for <app_name>"
   ```

3. Create application repository:
   ```bash
   gh repo create <app_name> --private --description "<app_name> application"
   ```

4. Clone repositories:
   ```bash
   mkdir <project_name>
   cd <project_name>
   gh repo clone .jsphere-<app_name>
   gh repo clone <app_name>
   ```

## 6. Project Structure Setup

1. Create configuration structure:
   ```bash
   cd .jsphere-<app_name>
   mkdir -p .applications
   mkdir -p .domains
   ```

2. Create application structure:
   ```bash
   cd ../<app_name>
   mkdir -p client/components/controls
   mkdir -p client/components/widgets
   mkdir -p client/components/pages
   mkdir -p server
   mkdir -p shared
   mkdir -p tests
   ```

3. Create configuration files:

   a. `.jsphere-<app_name>/.applications/<app_name>.json`:
   ```json
   {
       "host": {
           "name": "GitHub",
           "root": "<github_username>",
           "auth": {
               "value": "[token]"
           }
       },
       "packages": {
           "<app_name>": {}
       },
       "routeMappings": [
           { "route": "/", "path": "/<app_name>/client/index.html" },
           { "route": "/*", "path": "/<app_name>/server/index.js" }
       ],
       "featureFlags": [],
       "settings": {}
   }
   ```

   b. `.jsphere-<app_name>/.domains/localhost.json`:
   ```json
   {
       "appFile": "<app_name>",
       "settings": {},
       "contextExtensions": {}
   }
   ```

   c. Create root `.env`:
   ```
   CONFIG=LOCAL_CONFIG
   LOCAL_CONFIG=.jsphere-<app_name>
   ```

   d. `<app_name>/client/index.html`:
   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title><app_name></title>
   </head>
   <body>
       <div el-is="root-component" el-id="root"></div>
   </body>
   </html>
   ```

   e. `<app_name>/server/index.js`:
   ```javascript
   export function onGET(ctx) {
       return ctx.response.json({ status: 'Server running' });
   }
   ```

4. Commit and push initial structure:
   ```bash
   # Config repository
   cd .jsphere-<app_name>
   git add .
   git commit -m "Initial JSphere configuration setup"
   git push origin main

   # Application repository
   cd ../<app_name>
   git add .
   git commit -m "Initial application setup"
   git push origin main
   ```

## 7. macOS-Specific Setup (Optional)

If the user is on macOS:

1. Request permission to set up environment variables:
   ```
   "I notice you're on macOS. Would you like me to set up the necessary environment variables?"
   ```

2. If granted, execute:
   ```bash
   export DENO_INSTALL="/Users/$USER/.deno"
   export PATH="$DENO_INSTALL/bin:$PATH"
   ```

3. Update shell configuration:
   ```bash
   echo 'export DENO_INSTALL="/Users/$USER/.deno"' >> ~/.zshrc
   echo 'export PATH="$DENO_INSTALL/bin:$PATH"' >> ~/.zshrc
   source ~/.zshrc
   ```

## 8. Project Launch

1. Start JSphere:
   ```bash
   cd <project_name>
   js start
   ```

2. Provide access information:
   ```
   "Your JSphere application is now running:
   - Local URL: http://localhost/
   - Configuration repo: https://github.com/<username>/.jsphere-<app_name>
   - Application repo: https://github.com/<username>/<app_name>"
   ```

## Error Handling

The AI should handle these common issues:

1. Repository already exists:
   ```bash
   gh repo view <name> &>/dev/null
   # Handle existence, offer to use existing or create with different name
   ```

2. Authentication failures:
   ```
   "It seems there's an issue with the GitHub authentication. Would you like to:
   1. Try with a different token
   2. Create a new token
   3. Verify the token permissions"
   ```

3. Permission issues:
   ```
   "I encountered a permission error. Please verify:
   1. The token has 'repo' scope
   2. You have permission to create repositories
   3. The token hasn't expired"
   ```

## Repository Management Commands

The AI should know these commands for ongoing management:

1. List repositories:
   ```bash
   gh repo list --limit 100
   ```

2. Create repository:
   ```bash
   gh repo create <name> [--public|--private] [--description "description"]
   ```

3. Delete repository:
   ```bash
   gh repo delete <name> --yes
   ```

4. Clone repository:
   ```bash
   gh repo clone <owner>/<name> [<directory>]
   ```

5. View repository:
   ```bash
   gh repo view <owner>/<name>
   ```

## Best Practices for AI

1. Always ask for permission before executing commands
2. Provide clear explanations of what each command will do
3. Show command output to the user
4. Verify successful completion of each step
5. Maintain state of the setup process
6. Offer to explain any step in more detail
7. Handle errors gracefully with clear explanation and recovery options
8. Keep user informed of progress
9. Save sensitive information securely
10. Provide clear instructions for manual steps when needed

## Common Tasks Reference

1. Creating a new component:
   ```bash
   mkdir -p <app_name>/client/components/[controls|widgets|pages]/<component-name>
   touch <app_name>/client/components/[controls|widgets|pages]/<component-name>/<component-name>.js
   ```

2. Adding a new route:
   - Edit `.jsphere-<app_name>/.applications/<app_name>.json`
   - Add new route mapping
   - Commit and push changes

3. Managing dependencies:
   - Edit `<app_name>/shared/dependencies.js`
   - Register new dependencies
   - Commit and push changes
